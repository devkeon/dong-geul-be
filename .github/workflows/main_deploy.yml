name: CD with Gradle

# 언제 이 파일의 내용이 실행될 것인지 정의합니다.
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 말하고 있습니다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read

# 실제 실행될 내용들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - uses: actions/checkout@v3

      # open jdk 17 버전 환경을 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
      - name: Make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      # gradle을 통해 소스를 빌드.
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}"

          # Docker 로그인
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # Docker 이미지를 빌드하고, 태그를 사용하여 구분
          docker build -f Dockerfile -t spongging/${{ secrets.DOCKER_REPO }}:dong-geul-be_backend .
  
          # Docker Hub로 푸시
          docker push spongging/${{ secrets.DOCKER_REPO }}:dong-geul-be_backend
          
      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
      # 실행 시, dong-geul-be_backend를 사용합니다.
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.EC2_HOST }}
            username: ubuntu
            key: ${{ secrets.EC2_SSH_KEY }}
            port: 22
            script: |
              
              # 필요한 경우 Docker 그룹에 사용자 추가 (한 번만 실행하면 됨)
              sudo usermod -aG docker ${{ secrets.DOCKER_USERNAME }} || true
              
              # Docker 데몬 시작
              sudo systemctl start docker
              
              # Docker 로그인 (sudo 사용)
              echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
              
              # 기존 컨테이너 중지 및 삭제 (sudo 사용)
              sudo docker stop dong-geul-be-backend || true
              sudo docker rm dong-geul-be-backend || true
              
              # 최신 이미지 풀 (sudo 사용)
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/dong_geul_be_repo:latest
              
              # 새로운 컨테이너 실행 (sudo 사용)
              sudo docker run -d --name dong-geul-be-backend -p 80:80${{ secrets.DOCKER_USERNAME }}/dong_geul_be_repo:latest
